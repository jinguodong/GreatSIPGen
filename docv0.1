基于危险函数的高效畸形SIP信令集生成方法的研究与实现

A、	引言
B、	相关工作
C、	研究内容与实验
a)	C函数（假设）
b)	CPU评估
c)	搜索
d)	变异方法+遗传算法
D、	实验结果与分析
a)	图1+图2+图3
b)	V1=1/type; E1=w1*type+w10;
c)	V2=1/length; E2=w2*length+w20;
d)	(n, A); n代表迭代次数，A代表报文的平均攻击效果|最大攻击效果
e)	



1、	相关工作
a)	芬兰的Oulu大学研究了一种基于协议分析的Fuzzing测试。他们将大量精力放在了研究协议中可能存在的漏洞上，从而生成符合协议规范并且可能引发协议漏洞测试集，即PROTOS测试集。PROTOS测试集精简了测试用例，大幅减少了测试用例的数量，提高了测试效率，但是前期的研究任务较大，并且研究人员在分析协议漏洞时容易掺杂个人的主要元素，降低了测试集的完备性，不易测出隐晦的漏洞。
b)	中国科学技术大学提出了一种基于库函数动态跟踪的Fuzzing测试方法。其优点是不需要程序的源代码，且在程序实时运行时进行测试；缺点是此方法是建立在测试数据能够触发所有函数的基础之上，并且对于大型系统，如SIP服务器，需要为系统中所有的函数设置断点，并为分析每个函数的调用方式然后设计相应的测试用例，这种方式导致测试用例生成成本较大。
c)	北京邮电大学提出了一种基于SIP解析模式的畸形SIP生成及攻击方法，该方法针对IMS系统中的核心实体进行SIP解析模式的分析，根据分析结果并结合畸形类型和畸形值生成有针对性的畸形SIP信令以测试IMS系统中的不同实体。其优点是测试目标有针对性，测试效率高；缺点是测试用例的生成带有人为的主观因素，不能测试出隐晦的漏洞。
2、	主要内容
a)	C语言危险函数及其触发方式的研究
本文以漏洞产生的主要根源是危险函数的调用不当为基本依据，重点研究了C语言中的危险函数。本文调研搜集当前被业界列为C语言危险函数的函数，然后在WIKIBOOKS上搜索并对其源代码进行研究分析，最后在NVD、CVE等漏洞数据库中搜索与该危险函数相关的案例并对其研究分析，从而建立起C语言危险函数的知识库及其触发知识库。具体的知识库结构（图2.1）如下所示：
 
图2.1 C语言危险函数的知识库及其触发知识库数据库表

b)	SIP协议栈源代码建模及反向溯源获取覆盖路径方法的研究
i.	本文主要研究的是C语言实现的SIP协议栈，选择的研究对象是被广泛使用的协议栈OpenSER。
ii.	对测试SIP协议栈进行源代码建模旨在得到SIP协议栈的源代码结构为反向溯源获取覆盖路径建立知识基础。利用前期建立的危险函数知识库及其相应触发知识库，通过源代码静态扫描技术扫描测试SIP协议栈中有问题的危险函数的调用位置，然后利用源代码建模得到的测试SIP协议栈源代码结构，反向溯源获取触发相应危险函数的覆盖路径。
源代码建模：
SIP协议栈的源代码建模，使用Linux下的calltree开源工具，使用命令calltree –np –gb file-name,可以对SIP协议栈中的每个文件进行源代码建模，得到SIP协议栈源代码内部函数定义的情况，从而可以建立一个源代码文件名与内部函数定义的文件名函数关系表，见表1；同样的使用上述命令可以得到源代码内部定义的函数调用其他函数的情况，再结合源代码包含的头文件名称，则可以再建立一张函数名称与函数调用的函数调用关系表，见表2，源代码中函数的调用关系可以通过这两张表可以进行表达。
opensips_files_table 表名，源代码文件名与内部函数定义的文件名函数关系表
id，文件id
file_name，文件名
function_list，函数列表
file_headers，文件包含的头文件列表
file_base_path，文件所在目录的绝对路径

opensips_funcs_table 表名，函数名称与函数调用的函数调用关系表
id，函数id
file_id， 函数所在文件对应的文件名函数关系表中的id
function_name, 函数名称
sub_function_list, 被function_name调用的函数列表
反向溯源获取覆盖路径：
反向溯源过程是建立在源代码建模过程中产出的文件名函数关系表和函数调用关系表之上的，通过SPLint扫描SIP协议栈源代码可能会得到危险函数的位置信息，将得到的危险函数的位置信息通知给反向溯源模块，反向溯源模块利用前面提到的两张表使用深度优先搜索遍历可能的路径，在遍历的过程中如果碰到与SIP头相关的文件或者函数则记录此路径，直到所有路径跑完，为了防止测试过的路径被测试多次，采用路径标记法进行路径遍历，如此可以通过危险函数的位置信息得到可以出发此危险函数的测试路径。

c)	SIP协议与SIP协议栈对外接口函数之间的映射关系的研究
d)	最优化/次优化路径覆盖算法的研究
3、	实验
a)	
4、	另注
a)	
5、	总结
a)	

